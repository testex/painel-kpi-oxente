CHAMADA DA API DO DASHBOARD - APLICA√á√ÉO DE FILTROS
==================================================

ARQUIVO: frontend/src/pages/Dashboard.tsx
LINHAS: 47-67

FUN√á√ÉO: fetchDashboardData()
DESCRI√á√ÉO: Fun√ß√£o principal que busca dados do dashboard aplicando filtros temporais

===============================================================================

C√ìDIGO COMPLETO DA FUN√á√ÉO:

```typescript
// Fun√ß√£o para buscar dados do dashboard com filtro de datas
async function fetchDashboardData(dateRangeParam?: { from: Date | undefined; to: Date | undefined }) {
  // Se n√£o foi passado um range espec√≠fico, usar o range atual
  const rangeToUse = dateRangeParam || dateRange
  
  setLoading(true)
  try {
    const service = new DashboardService()
    let params = ''
    
    // üîó AQUI √â ONDE OS FILTROS S√ÉO APLICADOS
    if (rangeToUse.from && rangeToUse.to) {
      params = `?dataInicio=${format(rangeToUse.from, 'yyyy-MM-dd')}&dataFim=${format(rangeToUse.to, 'yyyy-MM-dd')}`
      console.log(`[Dashboard] Buscando dados do per√≠odo: ${format(rangeToUse.from, 'dd/MM/yyyy')} at√© ${format(rangeToUse.to, 'dd/MM/yyyy')}`)
    }
    
    // üîó CHAMADA DA API COM FILTROS
    const response = await service.getDashboardAnalytics(params)
    setDashboardData(response.data)
    setError(null)
  } catch (err) {
    console.error('Erro ao carregar dados do dashboard:', err)
    setError('Erro ao carregar dados do dashboard')
    setDashboardData(null)
  } finally {
    setLoading(false)
  }
}
```

===============================================================================

FUN√á√ÉO getDateRangeFromPeriod() - CONVERS√ÉO DE PER√çODOS
=======================================================

ARQUIVO: frontend/src/pages/Dashboard.tsx
LINHAS: 85-167

```typescript
// Fun√ß√£o para converter per√≠odo em intervalo de datas
const getDateRangeFromPeriod = (period: string) => {
  const now = new Date()
  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate())
  
  switch (period) {
    case 'esta-semana':
      // Esta semana: domingo (0) at√© hoje
      const startOfWeek = new Date(today)
      startOfWeek.setDate(today.getDate() - today.getDay())
      return { from: startOfWeek, to: today }
      
    case 'semana-passada':
      // Semana passada: domingo a s√°bado da semana anterior
      const lastWeekStart = new Date(today)
      lastWeekStart.setDate(today.getDate() - today.getDay() - 7)
      const lastWeekEnd = new Date(lastWeekStart)
      lastWeekEnd.setDate(lastWeekStart.getDate() + 6)
      return { from: lastWeekStart, to: lastWeekEnd }
      
    case 'ultimos-15-dias':
      // √öltimos 15 dias: h√° 15 dias at√© hoje
      const fifteenDaysAgo = new Date(today)
      fifteenDaysAgo.setDate(today.getDate() - 15)
      return { from: fifteenDaysAgo, to: today }
      
    case 'mes-atual':
      // M√™s atual: primeiro dia do m√™s at√© hoje
      const firstDay = new Date(now.getFullYear(), now.getMonth(), 1)
      return { from: firstDay, to: today }
      
    case 'mes-passado':
      // M√™s passado: primeiro ao √∫ltimo dia do m√™s anterior
      const lastMonthFirst = new Date(now.getFullYear(), now.getMonth() - 1, 1)
      const lastMonthLast = new Date(now.getFullYear(), now.getMonth(), 0)
      return { from: lastMonthFirst, to: lastMonthLast }
      
    case 'ultimo-trimestre':
      // √öltimo trimestre: 3 meses atr√°s at√© hoje
      const threeMonthsAgo = new Date(today)
      threeMonthsAgo.setMonth(today.getMonth() - 3)
      return { from: threeMonthsAgo, to: today }
      
    case '180-dias':
      // 180 dias: h√° 180 dias at√© hoje
      const sixMonthsAgo = new Date(today)
      sixMonthsAgo.setDate(today.getDate() - 180)
      return { from: sixMonthsAgo, to: today }
      
    case 'este-ano':
      // Este ano: primeiro dia do ano at√© hoje
      const yearStart = new Date(now.getFullYear(), 0, 1)
      return { from: yearStart, to: today }
      
    case 'ano-passado':
      // Ano passado: primeiro ao √∫ltimo dia do ano anterior
      const lastYearStart = new Date(now.getFullYear() - 1, 0, 1)
      const lastYearEnd = new Date(now.getFullYear() - 1, 11, 31)
      return { from: lastYearStart, to: lastYearEnd }
      
    default:
      if (period.startsWith('custom:')) {
        const [, fromStr, toStr] = period.split(':')
        return { from: new Date(fromStr), to: new Date(toStr) }
      }
      return null
  }
}
```

===============================================================================

HANDLERS DE MUDAN√áA DE FILTROS
===============================

1. HANDLER DE MUDAN√áA DE PER√çODO:
```typescript
// Handler para mudan√ßa de per√≠odo do TemporalFilter
const handlePeriodChange = (period: string) => {
  console.log('Per√≠odo selecionado:', period)
  const dateRange = getDateRangeFromPeriod(period)
  if (dateRange) {
    setDateRange(dateRange)
    fetchDashboardData(dateRange)  // üîó AQUI OS FILTROS S√ÉO APLICADOS
  }
}
```

2. HANDLER DE MUDAN√áA DE DATA RANGE:
```typescript
// Handler para mudan√ßa de data
const handleDateRangeChange = (range: { from: Date | undefined; to: Date | undefined }) => {
  setDateRange(range)
  if (range.from && range.to) {
    fetchDashboardData(range)  // üîó AQUI OS FILTROS S√ÉO APLICADOS
  }
}
```

3. INICIALIZA√á√ÉO COM FILTRO PADR√ÉO:
```typescript
useEffect(() => {
  // Inicializar com o per√≠odo "mes-atual"
  const initialRange = getDateRangeFromPeriod('mes-atual')
  if (initialRange) {
    setDateRange(initialRange)
    fetchDashboardData(initialRange)  // üîó AQUI OS FILTROS S√ÉO APLICADOS
  }
}, [])
```

===============================================================================

EXEMPLOS DE URLS GERADAS
========================

1. FILTRO "M√äS ATUAL":
   Per√≠odo selecionado: 'mes-atual'
   getDateRangeFromPeriod retorna: { from: 2024-01-01, to: 2024-01-15 }
   URL gerada: GET /api/dashboard/analytics?dataInicio=2024-01-01&dataFim=2024-01-15

2. FILTRO "√öLTIMOS 15 DIAS":
   Per√≠odo selecionado: 'ultimos-15-dias'
   getDateRangeFromPeriod retorna: { from: 2024-01-01, to: 2024-01-15 }
   URL gerada: GET /api/dashboard/analytics?dataInicio=2024-01-01&dataFim=2024-01-15

3. FILTRO PERSONALIZADO:
   Per√≠odo selecionado: 'custom:2024-01-01T00:00:00.000Z:2024-01-31T00:00:00.000Z'
   getDateRangeFromPeriod retorna: { from: 2024-01-01, to: 2024-01-31 }
   URL gerada: GET /api/dashboard/analytics?dataInicio=2024-01-01&dataFim=2024-01-31

===============================================================================

FLUXO COMPLETO DE APLICA√á√ÉO DOS FILTROS
=======================================

1. USU√ÅRIO SELECIONA FILTRO:
   - Clica em um per√≠odo no TemporalFilter
   - Ou seleciona datas personalizadas

2. CONVERS√ÉO DE PER√çODO:
   - handlePeriodChange() √© chamado
   - getDateRangeFromPeriod() converte per√≠odo em { from: Date, to: Date }

3. APLICA√á√ÉO DOS FILTROS:
   - fetchDashboardData() √© chamado com o range de datas
   - Formata datas como 'yyyy-MM-dd' usando format() da date-fns
   - Constr√≥i query string: ?dataInicio=2024-01-01&dataFim=2024-01-15

4. CHAMADA DA API:
   - service.getDashboardAnalytics(params) √© executado
   - URL completa: GET /api/dashboard/analytics?dataInicio=2024-01-01&dataFim=2024-01-15

5. PROCESSAMENTO BACKEND:
   - Rota /api/dashboard/analytics recebe par√¢metros
   - DashboardService.getDashboardAnalytics() processa datas
   - Calcula per√≠odo de compara√ß√£o automaticamente
   - Busca dados filtrados dos servi√ßos

6. RETORNO E EXIBI√á√ÉO:
   - Backend retorna analytics calculados
   - Frontend atualiza estado dashboardData
   - Componentes re-renderizam com novos dados

===============================================================================

PONTOS CHAVE
============

1. getDateRangeFromPeriod() - Converte per√≠odos em objetos { from: Date, to: Date }
2. fetchDashboardData() - Aplica os filtros na chamada da API
3. Formata√ß√£o de datas - Usa format(date, 'yyyy-MM-dd') para API
4. Logs de debug - Mostra per√≠odo sendo buscado
5. Tratamento de erros - Try/catch com feedback ao usu√°rio

===============================================================================

IMPORTS NECESS√ÅRIOS
===================

```typescript
import { format } from 'date-fns'
import { DashboardService } from '@/lib/api'
```

===============================================================================

ESTADOS UTILIZADOS
==================

```typescript
const [loading, setLoading] = useState(true)
const [dashboardData, setDashboardData] = useState<DashboardData | null>(null)
const [error, setError] = useState<string | null>(null)
const [dateRange, setDateRange] = useState<{ from: Date | undefined; to: Date | undefined }>({ from: undefined, to: undefined })
```

===============================================================================

FIM DA DOCUMENTA√á√ÉO
===================

√öltima atualiza√ß√£o: Janeiro 2024
Vers√£o: 1.0.0
Arquivo: CHAMADA_API_DASHBOARD.txt 