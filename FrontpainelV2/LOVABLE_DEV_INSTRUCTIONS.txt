# Instru√ß√µes para Lovable.dev - Painel KPI V2 Frontend

## üìã Vis√£o Geral do Projeto

Este √© um painel de KPIs (Key Performance Indicators) desenvolvido em React com TypeScript, focado em an√°lise de dados empresariais, segmenta√ß√£o de clientes (RFM) e m√©tricas de performance.

## üõ†Ô∏è Stack Tecnol√≥gico

### Core Technologies
- **React 18.2.0** - Framework principal
- **TypeScript 5.0.2** - Tipagem est√°tica
- **Vite 7.0.0** - Build tool e dev server
- **React Router DOM 6.14.2** - Roteamento

### Styling & UI
- **Tailwind CSS 3.3.3** - Framework CSS utilit√°rio
- **Tailwind CSS Animate 1.0.6** - Anima√ß√µes
- **Lucide React 0.263.1** - √çcones
- **Class Variance Authority 0.7.0** - Variantes de componentes
- **CLSX 2.0.0** - Utilit√°rio para classes condicionais
- **Tailwind Merge 1.14.0** - Merge de classes Tailwind

### Data & Charts
- **Recharts 2.7.2** - Biblioteca de gr√°ficos
- **Axios 1.4.0** - Cliente HTTP
- **Date-fns 4.1.0** - Manipula√ß√£o de datas

### Development Tools
- **ESLint** - Linting
- **PostCSS** - Processamento CSS
- **Autoprefixer** - Prefixos CSS autom√°ticos
- **Terser** - Minifica√ß√£o

## üé® Design System

### Paleta de Cores (CSS Variables)
```css
:root {
  --background: 0 0% 100%;
  --foreground: 222.2 84% 4.9%;
  --primary: 221.2 83.2% 53.3%;
  --primary-foreground: 210 40% 98%;
  --secondary: 210 40% 96%;
  --secondary-foreground: 222.2 84% 4.9%;
  --muted: 210 40% 96%;
  --muted-foreground: 215.4 16.3% 46.9%;
  --accent: 210 40% 96%;
  --accent-foreground: 222.2 84% 4.9%;
  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 210 40% 98%;
  --border: 214.3 31.8% 91.4%;
  --input: 214.3 31.8% 91.4%;
  --ring: 221.2 83.2% 53.3%;
  --radius: 0.5rem;
}
```

### Cores Principais
- **Azul Prim√°rio**: `#3B82F6` (blue-600)
- **Verde**: `#10B981` (green-600)
- **Roxo**: `#8B5CF6` (purple-600)
- **Amarelo**: `#F59E0B` (yellow-600)
- **√çndigo**: `#6366F1` (indigo-600)
- **Vermelho**: `#EF4444` (red-600)

### Tipografia
- **T√≠tulos**: `text-2xl font-bold text-gray-900`
- **Subt√≠tulos**: `text-lg font-semibold text-gray-800`
- **Texto**: `text-gray-600`
- **Labels**: `text-sm font-medium text-gray-700`

### Espa√ßamento
- **Container**: `p-6` (24px)
- **Cards**: `p-6` (24px)
- **Grid Gap**: `gap-6` (24px)
- **Se√ß√µes**: `space-y-6` (24px)

## üèóÔ∏è Estrutura de Layout

### Layout Principal
```tsx
<div className="flex h-screen bg-gray-100">
  {/* Sidebar */}
  <div className="w-64 bg-white shadow-lg">
    {/* Header da Sidebar */}
    <div className="p-6 bg-blue-600">
      <h1 className="text-xl font-bold text-white">üìä Painel KPIs</h1>
    </div>
    
    {/* Navega√ß√£o */}
    <nav className="mt-6">
      {/* Items de navega√ß√£o */}
    </nav>
  </div>

  {/* Conte√∫do Principal */}
  <div className="flex-1 overflow-auto">
    {/* Header */}
    <header className="bg-white shadow-sm border-b">
      <div className="px-6 py-4 flex items-center justify-between">
        <h1 className="text-2xl font-semibold text-gray-900">T√≠tulo da P√°gina</h1>
      </div>
    </header>

    {/* Main Content */}
    <main className="p-6">
      {/* Conte√∫do das p√°ginas */}
    </main>
  </div>
</div>
```

### Sidebar Responsiva
- **Desktop**: `w-64` (256px) - sempre vis√≠vel
- **Mobile**: `w-80` (320px) - overlay com overlay escuro
- **Transi√ß√µes**: `transition-transform duration-300 ease-in-out`

## üì± Componentes UI Principais

### Card Component
```tsx
export const Card: React.FC<CardProps> = ({ children, className = '', ...props }) => (
  <div className={`rounded-lg border bg-white text-gray-900 shadow-sm ${className}`} {...props}>
    {children}
  </div>
)

export const CardHeader: React.FC<CardHeaderProps> = ({ children, className = '', ...props }) => (
  <div className={`flex flex-col space-y-1.5 p-6 ${className}`} {...props}>
    {children}
  </div>
)

export const CardTitle: React.FC<CardTitleProps> = ({ children, className = '', ...props }) => (
  <h3 className={`text-2xl font-semibold leading-none tracking-tight ${className}`} {...props}>
    {children}
  </h3>
)

export const CardContent: React.FC<CardContentProps> = ({ children, className = '', ...props }) => (
  <div className={`p-6 pt-0 ${className}`} {...props}>
    {children}
  </div>
)
```

### Loading Spinner
```tsx
<div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
```

### Filtro Temporal
Componente complexo com:
- Seletor de per√≠odo (semana, m√™s, trimestre, ano)
- Campos de data personalizada
- Valida√ß√£o de datas
- Indicador visual do per√≠odo ativo

## üìä P√°ginas Principais

### 1. Dashboard Geral (`/`)
- **Layout**: Grid responsivo de cards KPI
- **Componentes**: 6 cards principais com m√©tricas
- **Filtros**: Filtro temporal integrado
- **Responsividade**: `grid-cols-1 md:grid-cols-2 lg:grid-cols-3`

### 2. Dashboard Executivo (`/executivo`)
- **Layout**: Cards maiores com m√©tricas estrat√©gicas
- **Gr√°ficos**: Recharts para visualiza√ß√µes
- **Foco**: KPIs de alto n√≠vel

### 3. An√°lise RFM (`/rfm`)
- **Layout**: Tabs com diferentes an√°lises
- **Funcionalidades**: Segmenta√ß√£o de clientes
- **Gr√°ficos**: Scatter plots e tabelas

### 4. Clientes (`/clientes`)
- **Layout**: Tabela com pagina√ß√£o
- **Funcionalidades**: CRUD de clientes
- **Navega√ß√£o**: Perfil detalhado do cliente

### 5. Produtos (`/produtos`)
- **Layout**: Cards de produtos
- **Funcionalidades**: An√°lise de produtos
- **Filtros**: Categorias e performance

## üéØ Padr√µes de Design

### Cards KPI
```tsx
<Card>
  <CardContent className="p-6">
    <div className="flex items-center justify-between">
      <div>
        <p className="text-sm font-medium text-gray-600">T√≠tulo do KPI</p>
        <p className="text-2xl font-bold text-gray-900">Valor</p>
      </div>
      <Icon className="h-8 w-8 text-blue-600" />
    </div>
  </CardContent>
</Card>
```

### Grid Responsivo
```tsx
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
  {/* Cards */}
</div>
```

### Estados de Loading
```tsx
if (loading) {
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-center py-12">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
      </div>
    </div>
  )
}
```

### Estados de Erro
```tsx
if (error) {
  return (
    <div className="space-y-6">
      <Card>
        <CardContent className="flex items-center justify-center py-12">
          <div className="text-center">
            <AlertTriangle className="h-16 w-16 mx-auto text-red-400 mb-4" />
            <h3 className="text-lg font-semibold text-red-900 mb-2">Erro ao Carregar</h3>
            <p className="text-red-600">{error}</p>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
```

## üîß Configura√ß√µes Importantes

### Vite Config
- **Alias**: `@` aponta para `./src`
- **Port**: 3001
- **Proxy**: `/api` para `http://localhost:3000`
- **Code Splitting**: Chunks otimizados por funcionalidade

### Tailwind Config
- **Dark Mode**: `["class"]`
- **Content**: Todos os arquivos `.tsx` em `src`
- **Custom Colors**: Sistema de cores com CSS variables
- **Animations**: Accordion animations

### TypeScript Config
- **Strict Mode**: Habilitado
- **Path Mapping**: `@/*` para `src/*`
- **Target**: ES2020

## üì¶ Estrutura de Arquivos

```
src/
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ ui/           # Componentes base (Card, LoadingSpinner, etc.)
‚îÇ   ‚îú‚îÄ‚îÄ layout/       # Layout components (Sidebar)
‚îÇ   ‚îî‚îÄ‚îÄ debug/        # Componentes de debug
‚îú‚îÄ‚îÄ modules/          # M√≥dulos organizados por funcionalidade
‚îÇ   ‚îú‚îÄ‚îÄ dashboard/
‚îÇ   ‚îú‚îÄ‚îÄ clientes/
‚îÇ   ‚îú‚îÄ‚îÄ produtos/
‚îÇ   ‚îî‚îÄ‚îÄ rfm/
‚îú‚îÄ‚îÄ pages/            # P√°ginas principais
‚îú‚îÄ‚îÄ config/           # Configura√ß√µes (API, environment)
‚îú‚îÄ‚îÄ lib/              # Utilit√°rios
‚îî‚îÄ‚îÄ utils/            # Fun√ß√µes utilit√°rias
```

## üöÄ Funcionalidades Especiais

### Lazy Loading
```tsx
const RFMAnalysis = lazy(() => import('./pages/RFMAnalysis'))
const DashboardExecutivo = lazy(() => import('./modules/dashboard/DashboardExecutivo'))
```

### Navega√ß√£o Din√¢mica
- Sistema de rotas com React Router
- Par√¢metros de URL para estados
- Navega√ß√£o entre perfil de cliente e listagem

### Filtros Temporais
- 13 op√ß√µes de per√≠odo pr√©-definidas
- Per√≠odo personalizado com valida√ß√£o
- Integra√ß√£o com API

### Sistema de Debug
- Componentes de debug para desenvolvimento
- Testes de navega√ß√£o
- Logs de estado

## üé® Elementos Visuais

### √çcones
- **Lucide React**: √çcones consistentes
- **Emojis**: Para categoriza√ß√£o visual
- **Tamanhos**: `h-4 w-4`, `h-8 w-8`, `h-16 w-16`

### Gradientes
- **Header Sidebar**: `bg-gradient-to-r from-blue-600 to-blue-700`
- **Progress Bar**: `bg-gradient-to-r from-blue-500 to-green-500`

### Sombras
- **Cards**: `shadow-sm`
- **Sidebar**: `shadow-lg`
- **Header**: `shadow-sm`

### Bordas
- **Radius**: `rounded-lg` (8px)
- **Borders**: `border border-gray-200`

## üì± Responsividade

### Breakpoints
- **Mobile**: `< 768px`
- **Tablet**: `768px - 1024px`
- **Desktop**: `> 1024px`

### Grid Responsivo
- **Mobile**: `grid-cols-1`
- **Tablet**: `md:grid-cols-2`
- **Desktop**: `lg:grid-cols-3`

### Sidebar Mobile
- **Overlay**: `fixed inset-0 bg-black bg-opacity-50`
- **Slide**: `translate-x-0` / `-translate-x-full`

## üîÑ Estados e Intera√ß√µes

### Hover States
```css
hover:bg-gray-50 hover:text-gray-900
hover:bg-blue-700
```

### Focus States
```css
focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent
```

### Active States
```css
bg-blue-100 text-blue-900 border-r-2 border-blue-600
```

### Disabled States
```css
disabled:bg-gray-300 disabled:cursor-not-allowed
```

## üìä Dados e API

### Estrutura de Dados KPI
```typescript
interface KPIData {
  totalClientes: number
  totalVendas: number
  receitaTotal: number
  ticketMedio: number
  clientesAtivos: number
  crescimentoMensal: number
}
```

### Endpoints
- `GET /api/v1/dashboard/kpis` - KPIs principais
- `GET /api/v1/clientes` - Lista de clientes
- `GET /api/v1/produtos` - Lista de produtos
- `GET /api/v1/rfm/analise` - An√°lise RFM

## üéØ Objetivos de Design

1. **Clareza**: Informa√ß√µes organizadas e f√°ceis de ler
2. **Efici√™ncia**: Navega√ß√£o r√°pida entre se√ß√µes
3. **Responsividade**: Funciona em todos os dispositivos
4. **Performance**: Lazy loading e otimiza√ß√µes
5. **Consist√™ncia**: Design system unificado
6. **Acessibilidade**: Contraste adequado e navega√ß√£o por teclado

## üöÄ Pr√≥ximos Passos para Implementa√ß√£o

1. **Setup do Projeto**: Instalar depend√™ncias e configurar Vite
2. **Componentes Base**: Implementar Card, LoadingSpinner, FiltroTemporal
3. **Layout Principal**: Sidebar e estrutura de navega√ß√£o
4. **P√°ginas**: Implementar cada p√°gina seguindo os padr√µes
5. **Integra√ß√£o API**: Conectar com backend
6. **Testes**: Testar responsividade e funcionalidades
7. **Otimiza√ß√µes**: Performance e bundle size

---

**Nota**: Este documento cont√©m todas as informa√ß√µes necess√°rias para recriar o layout do frontend no lovable.dev, incluindo tecnologias, estrutura, design system e padr√µes de implementa√ß√£o. 